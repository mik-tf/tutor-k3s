---
# Setup role - replaces setup.sh

- name: Check if k3s.yaml exists in tfgrid-k3s directory
  stat:
    path: "{{ tfgrid_dir }}/k3s.yaml"
  register: k3s_yaml

- name: Fail if k3s.yaml not found
  fail:
    msg: "Error: k3s.yaml not found in {{ tfgrid_dir }}. Please make sure you have deployed a K3s cluster using tfgrid-k3s first."
  when: not k3s_yaml.stat.exists

- name: Set KUBECONFIG environment variable
  ansible.builtin.set_fact:
    kubeconfig: "{{ tfgrid_dir }}/k3s.yaml"

- name: Export KUBECONFIG for current shell session
  ansible.builtin.shell: export KUBECONFIG="{{ kubeconfig }}"
  args:
    executable: /bin/bash
- name: Wait for K3s API server to become ready
  ansible.builtin.shell: |
    echo "Waiting for K3s API server to start..."
    for i in $(seq 1 12); do
      kubectl cluster-info && echo "API server is ready!" && exit 0
      echo "Attempt $i/12: API server not ready yet, waiting 10 seconds..."
      sleep 10
    done
    echo "API server still not ready after 2 minutes. Continuing anyway, but deployment may fail."
    exit 1
  register: kubectl_result
  ignore_errors: true
  changed_when: false

- name: Display cluster info
  debug:
    msg: |
      API Server Status: {{ "READY" if kubectl_result.rc == 0 else "NOT READY (continuing anyway)" }}
      {{ kubectl_result.stdout_lines | default([]) }}

- name: Set API server status fact
  set_fact:
    api_server_ready: "{{ kubectl_result.rc == 0 }}"

- name: Display API server warning
  debug:
    msg: |
      WARNING: The Kubernetes API server is not yet ready.
      This is normal during initial K3s startup or after a restart.
      
      Setup will continue, but some operations may fail until the API server is fully online.
      If deployment steps fail, simply retry the command after waiting a few minutes.
  when: not api_server_ready | bool

- name: Get nodes in the cluster (if API server is ready)
  ansible.builtin.command: kubectl get nodes -o wide
  register: nodes_result
  when: api_server_ready | bool
  changed_when: false
  ignore_errors: true

- name: Display nodes in the cluster
  debug:
    msg: "{{ nodes_result.stdout_lines }}"
  when: api_server_ready | bool and nodes_result.stdout_lines is defined

- name: Get nodes in the cluster
  ansible.builtin.command: kubectl get nodes -o wide
  register: nodes_result
  when: kubectl_result.rc == 0

- name: Display nodes in the cluster
  debug:
    msg: "{{ nodes_result.stdout_lines }}"
  when: kubectl_result.rc == 0

- name: Create Python virtual environment directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ venv_dir }}"
    state: directory

- name: Set up Python virtual environment
  ansible.builtin.pip:
    name: virtualenv
    state: present
  become: yes

- name: Create Python virtual environment
  ansible.builtin.command: python3 -m venv "{{ venv_dir }}"
  args:
    creates: "{{ venv_dir }}/bin/activate"

- name: Install/upgrade pip in virtual environment
  ansible.builtin.pip:
    name: pip
    state: latest
    virtualenv: "{{ venv_dir }}"

- name: Install tutor in virtual environment
  ansible.builtin.pip:
    name: tutor[full]
    state: latest
    virtualenv: "{{ venv_dir }}"

- name: Install kubernetes Python library in virtual environment
  ansible.builtin.pip:
    name: kubernetes
    state: present
    virtualenv: "{{ venv_dir }}"

- name: Create fish activation script
  ansible.builtin.template:
    src: activate.fish.j2
    dest: "{{ project_dir }}/activate.fish"
    mode: '0755'

- name: Create bash activation script
  ansible.builtin.template:
    src: activate.sh.j2
    dest: "{{ project_dir }}/activate.sh"
    mode: '0755'